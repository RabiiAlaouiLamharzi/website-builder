<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel='stylesheet' href='/resources/css/admin.css' />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <script src='/resources/js/lib/axios.min.js'></script>
    <title>Administration</title>
</head>
<body class="slide-in-element">
    <div class="admin">Admin View</div>
    <div class="dashboard-section">
        <div class="dashboard-menu">
            <div>
                <img class="main-logo" src="/resources/assets/logo-luma-builder.png" alt="logo">
                <p class="inbox-text">Inbox</p>
                <div class="dashboard-elements">
                    <a href="/"><div class="dashboard-element"><img class="icon-logo" src="/resources/assets/Categorize.png" alt=""><p class="dashboard-element-text">Dashboard</p></div></a>
                    <a href="/builder"><div class="dashboard-element"><img class="icon-logo edit" src="/resources/assets/Edit.png" alt=""><p class="dashboard-element-text">Website Builder</p></div></a>
                    <a href="/manager"><div class="dashboard-element"><img class="icon-logo" src="/resources/assets/User.png" alt=""><p class="dashboard-element-text">Website Manager</p></div></a>
                    <a href="/administration"><div class="dashboard-element-main"><img class="icon-logo" style="width: 20px; height: 25px;" src="/resources/assets/admin-panel.png" alt=""><p class="dashboard-element-text">Administration</p></div></a>
                </div>
            </div>
            <div>
                <div class="dashboard-elements">
                    <a href="login"><div class="dashboard-element"><img class="icon-logo" src="/resources/assets/power.png" alt=""><p class="dashboard-element-text">Log Out</p></div></a>
                </div>
            </div>
        </div>
        <div class="dashboard-body">
            <div class="dashboard-body-title">
                <h1 class="intro-dashboard-body">User Network Overview</h1>
                <p class="subtitle-dashboard-body">Interactive visualization of user and page relationships</p>
            </div>
            <div>
                <div class="button-container" id="buttonContainer"></div>
                <div class="graph-container" id="graph"></div>
            </div>
        </div>
    </div>
    <script>
    const users = {{{json users}}};
    const pages = {{{json pages}}}; 

    const nodes = users.map(user => ({
        id: user._id,
        name: user.username,
        group: "user",
    }));

    const projectNodes = pages.map(page => ({
        id: page._id,
        name: page.name,
        group: "project",
        user: page.user,
    }));

    const allNodes = [...nodes, ...projectNodes];
    console.log("All Nodes:", allNodes);

    const links = projectNodes.map(project => ({
        source: project.user,
        target: project.id,
    }));

    const buttonContainer = document.getElementById('buttonContainer');
    const graphContainer = document.getElementById('graph');

    const containerRect = graphContainer.getBoundingClientRect();
    const width = containerRect.width;
    const height = containerRect.height;

    const nodeRadius = 20;
    const bounds = {
        left: nodeRadius,
        right: width - nodeRadius,
        top: nodeRadius,
        bottom: height - nodeRadius
    };
    function boundingForce() {
        const strength = 1;
        const padding = 5;

        return (alpha) => {
            allNodes.forEach(d => {
                if (d.x < bounds.left + padding) {
                    d.vx += (bounds.left + padding - d.x) * strength * alpha;
                }
                if (d.x > bounds.right - padding) {
                    d.vx -= (d.x - bounds.right + padding) * strength * alpha;
                }
                if (d.y < bounds.top + padding) {
                    d.vy += (bounds.top + padding - d.y) * strength * alpha;
                }
                if (d.y > bounds.bottom - padding) {
                    d.vy -= (d.y - bounds.bottom + padding) * strength * alpha;
                }

                d.vx *= 0.9;
                d.vy *= 0.9;
            });
        };
    }

    const svg = d3.select('#graph')
        .append('svg')
        .attr('width', width)
        .attr('height', height);

    const simulation = d3.forceSimulation(allNodes)
        .force('link', d3.forceLink(links).id(d => d.id).distance(100))
        .force('charge', d3.forceManyBody().strength(-300))
        .force('center', d3.forceCenter(width / 2, height / 2))
        .force('bounds', boundingForce())
        .alphaMin(0.001)
        .alphaDecay(0.02);

    const link = svg.append('g')
        .selectAll('line')
        .data(links)
        .join('line')
        .attr('class', 'link')
        .attr('stroke-width', 2);

    const node = svg.append('g')
        .selectAll('g')
        .data(allNodes)
        .join('g')
        .attr('class', 'node')
        .call(d3.drag()
            .on('start', dragstarted)
            .on('drag', dragged)
            .on('end', dragended));

    node.append('circle')
        .attr('r', nodeRadius)
        .attr('fill', d => d.group === 'user' ? '#3498db' : '#2ecc71')
        .on('click', (event, d) => {
            if (d.group === 'user') {
                filterGraph(d.id);
                highlightButton(d.id, true);
            }
        });

    node.append('text')
        .text(d => d.name)
        .attr('dy', 4);

    simulation.on('tick', () => {
        node.attr('transform', d => {
            d.x = Math.max(bounds.left, Math.min(bounds.right, d.x));
            d.y = Math.max(bounds.top, Math.min(bounds.bottom, d.y));
            return `translate(${d.x},${d.y})`;
        });

        link
            .attr('x1', d => d.source.x)
            .attr('y1', d => d.source.y)
            .attr('x2', d => d.target.x)
            .attr('y2', d => d.target.y);
    });

    function filterGraph(userId) {
        node.style('display', d => d.group === 'user' && d.id !== userId ? 'none' :
                                    d.group === 'project' && d.user !== userId ? 'none' : null);
        link.style('display', d => d.source.id === userId || d.target.id === userId ? null : 'none');
    }

    function resetGraph() {
        node.style('display', null);
        link.style('display', null);
        highlightButton(null);
    }

    function highlightButton(userId, isDragging) {
        const buttons = document.querySelectorAll('.user-button');
        buttons.forEach(button => {
            button.classList.remove('active', 'dragging');
            if (button.getAttribute('data-user-id') === userId && userId !== null) {
                button.classList.add(isDragging ? 'dragging' : 'active');
            }
        });
    }

    function createButtons() {
        const allButton = document.createElement('button');
        allButton.classList.add('user-button');
        allButton.textContent = 'ALL';
        allButton.addEventListener('click', resetGraph);
        buttonContainer.appendChild(allButton);

        users.forEach(user => {
            const button = document.createElement('button');
            button.classList.add('user-button');
            button.textContent = user.username;
            button.setAttribute('data-user-id', user._id);
            button.addEventListener('click', () => {
                filterGraph(user._id);
                highlightButton(user._id, false);
            });
            buttonContainer.appendChild(button);
        });
    }

    function dragstarted(event, d) {
        if (!event.active) simulation.alphaTarget(0.3).restart();
        d.fx = d.x;
        d.fy = d.y;
        highlightButton(d.id, true);
    }

    function dragged(event, d) {
        d.fx = Math.max(bounds.left, Math.min(bounds.right, event.x));
        d.fy = Math.max(bounds.top, Math.min(bounds.bottom, event.y));
    }

    function dragended(event, d) {
        if (!event.active) simulation.alphaTarget(0);
        d.fx = null;
        d.fy = null;
        highlightButton(null, false);
    }

    createButtons();
    </script>
</body>
</html>